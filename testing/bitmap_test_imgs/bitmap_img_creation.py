from PIL import Image
import numpy as np

# Given some numpy matrix b, will produce valid string to put onto 
# img_test_description that can be copied onto variable "b" below
def getValidString(b):
    valid_matrix_str = "[\n"
    for row_idx in range(b.shape[0]):
        valid_matrix_str += "["
        for col_idx in range(b.shape[1]):
            valid_matrix_str += "[" + str(b[row_idx, col_idx, 0]) + ", "
            valid_matrix_str += str(b[row_idx, col_idx, 1]) + ", "
            valid_matrix_str += str(b[row_idx, col_idx, 2]) + "]"
            if (col_idx != b.shape[1]-1):
                valid_matrix_str += ", "
        if (row_idx != b.shape[0]-1):
            valid_matrix_str += "],\n"
        else:
            valid_matrix_str += "]\n"
    valid_matrix_str += "]"

    print(valid_matrix_str)
    return 0

b = [
[[56, 77, 57], [169, 61, 27], [200, 60, 12], [181, 185, 38], [31, 115, 36], [49, 18, 138], [21, 191, 223], [94, 243, 152], [197, 34, 247], [44, 222, 71], [24, 20, 208], [115, 34, 47], [10, 188, 97], [145, 55, 57], [4, 87, 205], [95, 129, 208], [154, 190, 129], [233, 125, 185], [60, 236, 129]],
[[70, 151, 30], [13, 90, 16], [179, 89, 101], [55, 9, 81], [69, 135, 216], [47, 141, 127], [88, 72, 250], [39, 182, 208], [125, 146, 48], [81, 183, 82], [147, 16, 217], [32, 145, 176], [10, 1, 31], [57, 24, 79], [226, 55, 219], [95, 161, 83], [144, 244, 9], [227, 169, 33], [91, 157, 74]],
[[34, 42, 210], [112, 179, 104], [39, 173, 31], [44, 69, 85], [54, 108, 198], [147, 106, 205], [172, 12, 23], [64, 92, 136], [158, 215, 214], [94, 114, 109], [96, 96, 203], [0, 147, 80], [125, 173, 217], [149, 163, 197], [246, 158, 249], [73, 9, 96], [36, 80, 120], [233, 105, 101], [71, 180, 66]],
[[207, 177, 101], [143, 5, 251], [215, 134, 24], [34, 197, 66], [216, 156, 105], [220, 11, 2], [218, 40, 152], [255, 75, 15], [214, 158, 79], [231, 147, 97], [119, 32, 52], [165, 246, 138], [244, 76, 225], [212, 192, 222], [120, 6, 198], [126, 34, 110], [178, 36, 54], [79, 82, 30], [10, 108, 59]],
[[237, 178, 241], [30, 200, 229], [207, 80, 160], [178, 59, 217], [252, 53, 61], [185, 227, 193], [211, 217, 49], [29, 29, 94], [53, 77, 160], [111, 89, 84], [81, 240, 165], [75, 40, 9], [81, 154, 249], [250, 195, 139], [28, 81, 44], [51, 61, 92], [217, 151, 236], [76, 76, 86], [184, 223, 108]],
[[208, 118, 168], [234, 125, 98], [185, 88, 178], [212, 36, 252], [95, 149, 244], [10, 76, 255], [106, 246, 166], [171, 141, 12], [137, 141, 218], [38, 33, 127], [67, 114, 156], [231, 222, 52], [32, 48, 45], [193, 81, 217], [103, 60, 41], [47, 68, 214], [93, 127, 159], [213, 230, 139], [59, 198, 189]],
[[66, 209, 191], [203, 43, 19], [114, 12, 226], [206, 39, 16], [237, 47, 118], [22, 48, 86], [197, 151, 88], [134, 123, 150], [219, 96, 245], [163, 103, 185], [156, 156, 252], [66, 119, 208], [8, 88, 10], [47, 132, 174], [197, 173, 88], [232, 108, 208], [17, 120, 174], [78, 92, 162], [12, 197, 139]],
[[77, 194, 223], [199, 7, 88], [179, 65, 145], [232, 32, 148], [141, 164, 37], [210, 149, 124], [253, 225, 29], [43, 222, 33], [148, 112, 123], [203, 145, 75], [138, 153, 142], [149, 3, 166], [57, 197, 24], [25, 57, 61], [10, 182, 130], [17, 126, 140], [17, 237, 71], [132, 166, 81], [146, 166, 10]],
[[32, 30, 240], [126, 54, 20], [152, 247, 122], [218, 145, 234], [54, 222, 197], [86, 238, 212], [227, 24, 118], [230, 102, 219], [46, 38, 155], [1, 221, 136], [183, 114, 88], [90, 177, 253], [245, 85, 193], [30, 159, 187], [250, 227, 137], [125, 79, 115], [10, 213, 97], [3, 19, 183], [91, 239, 210]],
[[150, 98, 37], [191, 105, 235], [170, 137, 156], [65, 111, 117], [252, 232, 61], [146, 107, 61], [107, 203, 48], [203, 141, 240], [155, 193, 241], [21, 222, 6], [5, 21, 38], [251, 203, 248], [197, 84, 25], [189, 41, 217], [149, 17, 114], [123, 228, 39], [15, 246, 205], [5, 42, 235], [66, 80, 241]],
[[153, 137, 49], [24, 161, 150], [60, 130, 166], [74, 172, 25], [158, 162, 83], [150, 33, 24], [14, 102, 232], [235, 204, 82], [167, 151, 121], [184, 95, 100], [99, 167, 46], [61, 153, 77], [56, 56, 47], [118, 111, 32], [40, 170, 175], [135, 22, 54], [187, 26, 152], [51, 105, 226], [175, 31, 77]],
[[70, 247, 187], [106, 251, 188], [204, 94, 86], [148, 74, 171], [160, 148, 21], [93, 107, 124], [165, 113, 44], [233, 221, 193], [160, 186, 223], [225, 192, 22], [181, 226, 62], [246, 103, 236], [135, 130, 144], [208, 108, 77], [171, 10, 74], [151, 87, 34], [230, 99, 240], [205, 17, 239], [59, 86, 110]],
[[68, 103, 16], [59, 157, 32], [75, 204, 215], [6, 116, 73], [52, 99, 57], [243, 239, 101], [65, 122, 43], [232, 191, 70], [9, 213, 177], [72, 124, 179], [110, 146, 189], [245, 200, 172], [170, 192, 51], [4, 62, 8], [227, 56, 242], [20, 187, 136], [45, 69, 231], [235, 30, 189], [89, 80, 215]]
]

b = np.array(b)

# b = np.random.randint(0, 256, (50,50,3))

test_num = 9

a=(b).astype("uint8")
Image.fromarray(a).save("test_" + str(test_num) + ".bmp")

getValidString(b)
